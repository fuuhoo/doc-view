import org.jetbrains.changelog.Changelog
import org.jetbrains.changelog.ChangelogSectionUrlBuilder
import org.jetbrains.changelog.ExtensionsKt

plugins {
    id 'org.jetbrains.intellij' version '1.16.1'
    id 'org.jetbrains.changelog' version '2.1.2'
}

apply plugin: 'org.jetbrains.changelog'

group project.pluginGroup
version project.pluginVersion

sourceCompatibility = 17
targetCompatibility = 17

repositories {
    mavenLocal()
    maven { url "https://maven.aliyun.com/repository/public" }
    mavenCentral()
}

dependencies {
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    plugins = ['com.intellij.java', 'markdown','org.jetbrains.idea.maven']
    pluginName = project.pluginName
    version = project.platformVersion
    type.set("IC") // 使用社区版，不需要激活

//    type = project.platformType
    downloadSources = true
    updateSinceUntilBuild = false
    buildSearchableOptions.enabled = false
}

patchPluginXml {
    sinceBuild = project.pluginSinceBuild
    untilBuild = project.pluginUntilBuild

    pluginDescription.set(file(project.pluginDescription).getText('UTF-8'))
    changeNotes.set(provider {
        changelog.renderItem(
                changelog.getLatest(),
                Changelog.OutputType.HTML
        )
    })
}

changelog {
    path = file("CHANGELOG.md").canonicalPath
    header = "[${-> version.get()}] - ${ExtensionsKt.date("yyyy-MM-dd")}"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    groups = ["Added", "Changed", "Deprecated", "Removed", "Fixed", "Security"]
    lineSeparator = "\n"
    combinePreReleases = true
    sectionUrlBuilder = { repositoryUrl, currentVersion, previousVersion, isUnreleased -> "foo" } as ChangelogSectionUrlBuilder
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"

}

//// 配置 runIde 任务
//tasks.withType(org.jetbrains.intellij.tasks.RunIdeTask).configureEach {
//    runIde {
//        systemProperty "idea.is.internal", "true"
//        systemProperty "idea.debug.mode", "true"
//        // 启用详细日志
//        systemProperty "idea.log.debug.categories", "#com.siwe.fubin"
//    }
//
//    // 可选：使用主 IDE 的配置（如果希望共享插件和设置）
//    // systemProperty "idea.config.path", System.getProperty("idea.config.path")
//    // systemProperty "idea.plugins.path", System.getProperty("idea.plugins.path")
//}

//runIde {
//    // 禁用所有非核心插件
//    systemProperty "idea.plugins.compatible", "false"
//    systemProperty "idea.load.plugins", "false"
//    // 最小化启动
//    systemProperty "idea.classpath.index.enabled", "false"
//    systemProperty "idea.config.path", project.buildDir.path + "/config"
//    systemProperty "idea.system.path", project.buildDir.path + "/system"
//}